import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";

import { api } from "~/utils/api";

export default function Home() {
  const [text, setText] = useState("");
  const { mutateAsync: createComment } = api.comment.create.useMutation();
  const { data: comments } = api.comment.getAll.useQuery();
  const apiUtils = api.useContext();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex min-h-screen flex-col items-center justify-center bg-black">
        <AuthShowcase />
        <form
          onSubmit={(e) => {
            void createComment({ text }).then(() => {
              void apiUtils.comment.getAll.invalidate();
            });
            e.preventDefault();
          }}
        >
          <input
            onChange={(e) => {
              setText(e.target.value);
            }}
          ></input>
        </form>
        <ul>
          {comments?.map((comment, index) => (
            <li className="text-white" key={index}>
              {comment.text} by {comment.authorId}
            </li>
          ))}
        </ul>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
